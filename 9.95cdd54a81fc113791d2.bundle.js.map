{"version":3,"file":"9.95cdd54a81fc113791d2.bundle.js","sources":["webpack:///../superset-ui-preset-chart-xy/src/ScatterPlot/Encoder.ts"],"sourcesContent":["import { Value } from 'vega-lite/build/src/channeldef';\nimport { ChannelTypeToDefMap } from '../encodeable/types/Channel';\nimport { ExtractChannelOutput } from '../encodeable/types/ChannelDef';\nimport createEncoderClass from '../encodeable/createEncoderClass';\n\n/**\n * Define channel types\n */\nconst channelTypes = {\n  fill: 'Color',\n  group: 'Text',\n  size: 'Numeric',\n  stroke: 'Color',\n  tooltip: 'Text',\n  x: 'X',\n  y: 'Y',\n} as const; // \"as const\" is mandatory\n\nexport type ChannelTypes = typeof channelTypes;\n\n/**\n * TEMPLATE:\n * Helper for defining encoding\n */\ntype CreateChannelDef<\n  ChannelName extends keyof ChannelTypes,\n  Output extends Value\n> = ChannelTypeToDefMap<Output>[ChannelTypes[ChannelName]];\n\n/**\n * Encoding definition\n */\nexport type Encoding = {\n  fill: CreateChannelDef<'fill', string>;\n  group: CreateChannelDef<'group', string>[];\n  size: CreateChannelDef<'size', number>;\n  stroke: CreateChannelDef<'stroke', string>;\n  tooltip: CreateChannelDef<'tooltip', string>[];\n  x: CreateChannelDef<'x', number>;\n  y: CreateChannelDef<'y', number>;\n};\n\n/**\n * TEMPLATE:\n * Can use this to get returned type of a Channel\n * example usage: ChannelOutput<'x'>\n */\nexport type ChannelOutput<ChannelName extends keyof Encoding> = ExtractChannelOutput<\n  Encoding[ChannelName]\n>;\n\nexport default class Encoder extends createEncoderClass<ChannelTypes, Encoding>({\n  channelTypes,\n  defaultEncoding: {\n    fill: { value: '#222' },\n    group: [],\n    size: { value: 5 },\n    stroke: { value: 'none' },\n    tooltip: [],\n    x: { field: 'x', type: 'quantitative' },\n    y: { field: 'y', type: 'quantitative' },\n  },\n}) {}\n"],"mappings":"AAQA","sourceRoot":""}