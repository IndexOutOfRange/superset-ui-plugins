{"version":3,"file":"6.3c4353fdbb8b2c7367dc.bundle.js","sources":["webpack:////Users/krist_wongsuphasawat/workspace/superset-ui-plugins/node_modules/@data-ui/xy-chart/esm/series/LineSeries.js"],"sourcesContent":["function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { color } from '@data-ui/theme';\nimport { FocusBlurHandler } from '@data-ui/shared';\nimport { GlyphDot } from '@vx/glyph';\nimport { LinePath } from '@vx/shape';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { callOrValue, isDefined } from '../utils/chartUtils';\nimport findClosestDatum from '../utils/findClosestDatum';\nimport interpolatorLookup from '../utils/interpolatorLookup';\nimport { interpolationShape, lineSeriesDataShape } from '../utils/propShapes';\nimport sharedSeriesProps from '../utils/sharedSeriesProps';\n\nvar propTypes = _extends({}, sharedSeriesProps, {\n  data: lineSeriesDataShape.isRequired,\n  interpolation: interpolationShape,\n  showPoints: PropTypes.bool,\n  stroke: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  strokeDasharray: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  strokeWidth: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  strokeOpacity: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  strokeLinecap: PropTypes.oneOf(['butt', 'square', 'round', 'inherit'])\n});\n\nvar defaultProps = {\n  interpolation: 'monotoneX',\n  showPoints: false,\n  stroke: color.default,\n  strokeDasharray: null,\n  strokeWidth: 3,\n  strokeOpacity: 1,\n  strokeLinecap: 'round'\n};\n\nvar x = function x(d) {\n  return d.x;\n};\n\nvar y = function y(d) {\n  return d.y;\n};\n\nvar defined = function defined(d) {\n  return isDefined(y(d));\n};\n\nvar noEventsStyles = {\n  pointerEvents: 'none'\n};\n\nvar LineSeries =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(LineSeries, _React$PureComponent);\n\n  function LineSeries() {\n    return _React$PureComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = LineSeries.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        data = _this$props.data,\n        disableMouseEvents = _this$props.disableMouseEvents,\n        interpolation = _this$props.interpolation,\n        showPoints = _this$props.showPoints,\n        stroke = _this$props.stroke,\n        strokeDasharray = _this$props.strokeDasharray,\n        strokeWidth = _this$props.strokeWidth,\n        strokeLinecap = _this$props.strokeLinecap,\n        strokeOpacity = _this$props.strokeOpacity,\n        xScale = _this$props.xScale,\n        yScale = _this$props.yScale,\n        margin = _this$props.margin,\n        onClick = _this$props.onClick,\n        onMouseMove = _this$props.onMouseMove,\n        onMouseLeave = _this$props.onMouseLeave;\n    if (!xScale || !yScale) return null;\n    var strokeValue = callOrValue(stroke);\n    var strokeOpacityValue = callOrValue(strokeOpacity);\n    var curve = interpolatorLookup[interpolation] || interpolatorLookup.monotoneX;\n    return React.createElement(LinePath, {\n      style: disableMouseEvents ? noEventsStyles : null,\n      data: data,\n      xScale: xScale,\n      yScale: yScale,\n      x: x,\n      y: y,\n      stroke: strokeValue,\n      strokeWidth: callOrValue(strokeWidth),\n      strokeDasharray: callOrValue(strokeDasharray),\n      strokeLinecap: strokeLinecap,\n      strokeOpacity: strokeOpacityValue,\n      curve: curve,\n      defined: defined,\n      onClick: disableMouseEvents ? null : onClick && function () {\n        return function (event) {\n          var d = findClosestDatum({\n            data: data,\n            getX: x,\n            event: event,\n            xScale: xScale,\n            marginLeft: margin.left\n          });\n          onClick({\n            event: event,\n            data: data,\n            datum: d,\n            color: strokeValue\n          });\n        };\n      },\n      onMouseMove: disableMouseEvents ? null : onMouseMove && function () {\n        return function (event) {\n          var d = findClosestDatum({\n            data: data,\n            getX: x,\n            event: event,\n            xScale: xScale,\n            marginLeft: margin.left\n          });\n          onMouseMove({\n            event: event,\n            data: data,\n            datum: d,\n            color: strokeValue\n          });\n        };\n      },\n      onMouseLeave: disableMouseEvents ? null : onMouseLeave && function () {\n        return onMouseLeave;\n      },\n      glyph: function glyph(d, i) {\n        return (// <a /> wrapper is needed for focusing with SVG 1.2 regardless of whether we show a point\n          isDefined(x(d)) && isDefined(y(d)) && React.createElement(FocusBlurHandler, {\n            key: \"linepoint-\" + i,\n            onBlur: disableMouseEvents ? null : onMouseLeave,\n            onFocus: disableMouseEvents ? null : function (event) {\n              onMouseMove({\n                event: event,\n                data: data,\n                datum: d,\n                color: d.stroke || callOrValue(stroke, d, i),\n                index: i\n              });\n            }\n          }, showPoints && React.createElement(GlyphDot, {\n            key: i + \"-\" + x(d),\n            cx: xScale(x(d)),\n            cy: yScale(y(d)),\n            r: 4,\n            fill: d.stroke || callOrValue(stroke, d, i),\n            stroke: \"#FFFFFF\",\n            strokeWidth: 1,\n            style: {\n              pointerEvents: 'none'\n            }\n          }, d.label && React.createElement(\"text\", {\n            x: xScale(x(d)),\n            y: yScale(y(d)),\n            dx: 10,\n            fill: d.stroke || callOrValue(stroke, d, i),\n            stroke: \"#fff\",\n            strokeWidth: 1,\n            fontSize: 12\n          }, d.label)))\n        );\n      }\n    });\n  };\n\n  return LineSeries;\n}(React.PureComponent);\n\nexport { LineSeries as default };\nLineSeries.propTypes = propTypes;\nLineSeries.defaultProps = defaultProps;\nLineSeries.displayName = 'LineSeries';"],"mappings":"AAEA","sourceRoot":""}